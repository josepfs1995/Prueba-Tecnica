// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Navisaf.Infra.Persistence;

#nullable disable

namespace Navisaf.Infra.Persistence.Migrations
{
    [DbContext(typeof(NavisafDbContext))]
    partial class NavisafDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Navisaf.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasPrecision(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("CustomerName");

                    b.Property<double>("DistanceKilometers")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)")
                        .HasColumnName("DistanceKilometers");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Navisaf.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasPrecision(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f2e1f2e-41b2-4a0c-b709-5e1f6a66e921"),
                            Name = "Laptop Dell"
                        },
                        new
                        {
                            Id = new Guid("9c0a8cd2-2b88-4bc7-a239-6b876ba7e15c"),
                            Name = "Iphone 16 Pro Max"
                        },
                        new
                        {
                            Id = new Guid("2d17847e-d760-443c-bcf1-e6d4109b4972"),
                            Name = "Disco Duro SSD 1TB"
                        });
                });

            modelBuilder.Entity("Navisaf.Domain.Entities.Order", b =>
                {
                    b.HasOne("Navisaf.Domain.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Products");

                    b.OwnsOne("Navisaf.Domain.Entities.Location", "Destination", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("DestinationLatitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("DestinationLongitude");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Navisaf.Domain.Entities.Location", "Origin", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("OriginLatitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("OriginLongitude");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("Origin")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Navisaf.Domain.Entities.Product", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
